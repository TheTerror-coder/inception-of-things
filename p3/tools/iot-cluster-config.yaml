apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: iot-cluster
servers: 1
agents: 0
kubeAPI:
  # host: "localhost"
  hostIP: "127.0.0.1"
  hostPort: "6445"
image: rancher/k3s:v1.32.2-k3s1
network: iot-net
# subnet: "172.28.0.0/16"
# token: superSecretToken
ports:
  - port: 1880:80
    nodeFilters:
      - server:0
  - port: 1443:443
    nodeFilters:
      - server:0
# env:
#   - envVar: bar=baz
#     nodeFilters:
#       - server:0

options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returning; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    # disableLoadbalancer: false # same as `--no-lb`
    # disableImageVolume: false # same as `--no-image-volume`
    # disableRollback: false # same as `--no-Rollback`
    # loadbalancer:
    #   configOverrides:
    #     - settings.workerConnections=2048
  k3s: # options passed on to K3s itself
    extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
      - arg: "--cluster-init"
        nodeFilters:
          - server:0
      - arg: "--disable=traefik"
        nodeFilters:
          - server:0
      # - arg: "--debug"
      #   nodeFilters:
      #     - server:*
      # - arg: "--log='/tmp/k3s.log'"
      #   nodeFilters:
      #     - server:*
      # - arg: "--alsologtostderr"
      #   nodeFilters:
      #     - server:*
      # - arg: "--write-kubeconfig-mode='0644'"
      #   nodeFilters:
      #     - server:*
    # nodeLabels:
    #   - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
    #     nodeFilters:
    #       - agent:1
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
  runtime: # runtime (docker) specific options
    # gpuRequest: all # same as `--gpus all`
    # labels:
    #   - label: bar=baz # same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
    #     nodeFilters:
    #       - agent:1
    ulimits:
      - name: nofile
        soft: 26677
        hard: 26677