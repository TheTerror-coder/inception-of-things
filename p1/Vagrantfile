# -*- mode: ruby -*-
# vi: set ft=ruby :

SERVER_NODENAME 			= "jfayeS"
SERVER_ETH1_IP				= "192.168.56.110"
WORKER_NODE_NAME			= "jfayeSW"
WORKER_NODE_ETH1_IP			= "192.168.56.111"
RAM							= 1024
CPUs						= 2
K3S_PORT					= "6443"
K3S_TOKEN					= "42@ilove"
K3S_AGENT_TOKEN				= "42@ilove"
K3S_URL						= "https://" + SERVER_ETH1_IP + ":" + K3S_PORT
# K3S_CONFIG_FILE				= "/etc/rancher/k3s/config.yaml"
SERVER_NODE_HOME			= "/home/vagrant"

SERVER_NODE_ENV_VARIABLES	= {
	"SERVER_NODE_HOME" => SERVER_NODE_HOME,
	"SERVER_ETH1_IP" => SERVER_ETH1_IP,
	"K3S_TOKEN" => K3S_TOKEN,
	"K3S_AGENT_TOKEN" => K3S_AGENT_TOKEN,
}

WORKER_NODE_ENV_VARIABLES	= {
	"SERVER_NODE_HOME" => SERVER_NODE_HOME,
	"WORKER_NODE_ETH1_IP" => WORKER_NODE_ETH1_IP,
	"K3S_TOKEN" => K3S_TOKEN,
	"K3S_URL" => K3S_URL,
}

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

	config.vm.define SERVER_NODENAME do |server|

		server.vm.hostname = SERVER_NODENAME

		# Every Vagrant development environment requires a box. You can search for
		# boxes at https://vagrantcloud.com/search.
		# server.vm.box = "centos/8"
		server.vm.box = "debian/bookworm64"
		# server.vm.box = "generic/alpine318"

		# Create a forwarded port mapping which allows access to a specific port
		# within the machine from a port on the host machine. In the example below,
		# accessing "localhost:8080" will access port 80 on the guest machine.
		# NOTE: This will enable public access to the opened port
		# config.vm.network "forwarded_port", guest: 80, host: 1880

		# Create a forwarded port mapping which allows access to a specific port
		# within the machine from a port on the host machine and only allow access
		# via 127.0.0.1 to disable public access
		# config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

		# Create a private network, which allows host-only access to the machine
		# using a specific IP.
		server.vm.network "private_network", ip: SERVER_ETH1_IP

		# Create a public network, which generally matched to bridged network.
		# Bridged networks make the machine appear as another physical device on
		# your network.
		# config.vm.network "public_network"

		# Share an additional folder to the guest VM. The first argument is
		# the path on the host to the actual folder. The second argument is
		# the path on the guest to mount the folder. And the optional third
		# argument is a set of non-required options.
		# config.vm.synced_folder "../data", "/vagrant_data"

		# Disable the default share of the current code directory. Doing this
		# provides improved isolation between the vagrant box and your host
		# by making sure your Vagrantfile isn't accessible to the vagrant box.
		# If you use this you may want to enable additional shared subfolders as
		# shown above.
		server.vm.synced_folder ".", "/vagrant", disabled: true

		# Provider-specific configuration so you can fine-tune various
		# backing providers for Vagrant. These expose provider-specific options.
		server.vm.provider "virtualbox" do |vb|
			# Display the VirtualBox GUI when booting the machine
			# vb.gui = true

			vb.name = SERVER_NODENAME
			vb.memory = RAM
			vb.cpus = CPUs
		end
		#
		# View the documentation for the provider you are using for more
		# information on available options.

		# Enable provisioning with a shell script. Additional provisioners such as
		# Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
		# documentation for more information about their specific syntax and use.
		# server.vm.synced_folder "./tmp_volume/", "/tmp"
		# server.vm.provision "file", source: "./tools/config.yaml", destination: "/tmp/config.yaml"
		server.vm.provision "shell", env: SERVER_NODE_ENV_VARIABLES, path: "./tools/server-node-script.sh"

	end


	config.vm.define WORKER_NODE_NAME do |server_worker|

		server_worker.vm.hostname = WORKER_NODE_NAME

		# Every Vagrant development environment requires a box. You can search for
		# boxes at https://vagrantcloud.com/search.
		server_worker.vm.box = "debian/bookworm64"

		# Create a forwarded port mapping which allows access to a specific port
		# within the machine from a port on the host machine. In the example below,
		# accessing "localhost:8080" will access port 80 on the guest machine.
		# NOTE: This will enable public access to the opened port
		# config.vm.network "forwarded_port", guest: 80, host: 1880

		# Create a forwarded port mapping which allows access to a specific port
		# within the machine from a port on the host machine and only allow access
		# via 127.0.0.1 to disable public access
		# config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

		# Create a private network, which allows host-only access to the machine
		# using a specific IP.
		server_worker.vm.network "private_network", ip: WORKER_NODE_ETH1_IP

		# Create a public network, which generally matched to bridged network.
		# Bridged networks make the machine appear as another physical device on
		# your network.
		# config.vm.network "public_network"

		# Share an additional folder to the guest VM. The first argument is
		# the path on the host to the actual folder. The second argument is
		# the path on the guest to mount the folder. And the optional third
		# argument is a set of non-required options.
		# config.vm.synced_folder "../data", "/vagrant_data"

		# Disable the default share of the current code directory. Doing this
		# provides improved isolation between the vagrant box and your host
		# by making sure your Vagrantfile isn't accessible to the vagrant box.
		# If you use this you may want to enable additional shared subfolders as
		# shown above.
		server_worker.vm.synced_folder ".", "/vagrant", disabled: true

		# Provider-specific configuration so you can fine-tune various
		# backing providers for Vagrant. These expose provider-specific options.
		server_worker.vm.provider "virtualbox" do |vb|
			# Display the VirtualBox GUI when booting the machine
			# vb.gui = true

			vb.name = WORKER_NODE_NAME
			vb.memory = RAM
			vb.cpus = CPUs
		end
		#
		# View the documentation for the provider you are using for more
		# information on available options.

		# Enable provisioning with a shell script. Additional provisioners such as
		# Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
		# documentation for more information about their specific syntax and use.
		# server_worker.vm.provision "file", source: "./tools/config.yaml", destination: "/tmp/config.yaml"
		server_worker.vm.provision "shell", env: WORKER_NODE_ENV_VARIABLES, path: "./tools/worker-node-script.sh"

	end
end
